{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ZirconTech Cloud Operations on AWS Welcome to our internal documentation hub. Use the menu to explore runbooks, governance guidelines, cost-management playbooks, and more.","title":"Home"},{"location":"#zircontech-cloud-operations-on-aws","text":"Welcome to our internal documentation hub. Use the menu to explore runbooks, governance guidelines, cost-management playbooks, and more.","title":"ZirconTech Cloud Operations on AWS"},{"location":"account-lifecycle/","text":"ZirconTech Methodology \u2013 AWS Account Lifecycle 1. Purpose Define a repeatable process to create, operate, suspend, and delete AWS accounts with automation, guardrails, and clear approval gates. 2. Lifecycle Stages Stage Goal Typical Status Flags Owner Request Business or project requests a new account Ticket opened Project sponsor Create Account provisioned with baselines CT CreateManagedAccount event Landing-zone engineer Operate Workloads run, controls enforced Normal ops Workload team Suspend Temporarily restrict activity CT SuspendManagedAccount Security / FinOps Delete Close account, retain evidence CT CloseAccount Governance board 3. Account Creation Workflow Inputs Business justification Desired OU (e.g., Workloads/Prod ) Cost-allocation tag key-value Automation Service: Account Factory (native) or Account Factory for Terraform (AFT) Optional extra steps (Lambda or AFT hooks): bash # Pseudocode \u2013 runs right after account is provisioned create-iam-role --role-name \"ZirconTechOps\" \\ --policy-arn arn:aws:iam::aws:policy/AdministratorAccess enable-security-hub --standards \"CIS-1.5\" tag-resource --resource-id <accountId> --tags \"CostCenter=1234\" Outputs Account ID, email, OU path IAM role ZirconTechOps with least privilege for support Entry in Cost Explorer with tags active 4. Account Suspension Workflow Step Action Tool 1 Trigger suspension ticket Jira / ServiceNow 2 Move account to Suspended OU (SCP denies writes) Organizations API 3 Disable IAM Identity Center assignments IAM Identity Center 4 Freeze budgets and alert bill-ops AWS Budgets 5 Log suspension event CloudWatch + centralized audit account 5. Account Deletion / Closure Workflow Verify account is Suspended for at least 60 days. Export CloudTrail, Config, and S3 objects to the LogArchive account. Close account via CloseAccount (Organizations). Retain logs for 7 years in Glacier Deep Archive (compliance default). Update CMDB and tag account as Status=Closed . 6. Additional IAM Roles Role name Purpose Created at ZirconTechOps Break-glass admin support Account create SecurityAudit Read-only security reviews Account create FinOpsReadOnly Cost Explorer & Budgets API Account create Roles are deployed by AFT hook or Control Tower lifecycle Lambda. 7. Drift Detection & Review Cadence Monthly \u2013 Control Tower detects guardrail drift; report sent to project owner. Quarterly \u2013 Review suspended accounts for deletion approval. Annually \u2013 Confirm IAM roles, tags, and OU placement still correct. 8. Deliverables to Customer Account lifecycle runbooks (PDF + Markdown) AFT or pipeline source code IAM role JSON templates Compliance evidence: drift reports, closure proof 9. Change Management Any update to lifecycle steps, retention periods, or automation hooks is version-controlled in Git and requires a pull-request review by the Governance Board.","title":"Account Lifecycle"},{"location":"account-lifecycle/#zircontech-methodology-aws-account-lifecycle","text":"","title":"ZirconTech Methodology \u2013 AWS Account Lifecycle"},{"location":"account-lifecycle/#1-purpose","text":"Define a repeatable process to create, operate, suspend, and delete AWS accounts with automation, guardrails, and clear approval gates.","title":"1. Purpose"},{"location":"account-lifecycle/#2-lifecycle-stages","text":"Stage Goal Typical Status Flags Owner Request Business or project requests a new account Ticket opened Project sponsor Create Account provisioned with baselines CT CreateManagedAccount event Landing-zone engineer Operate Workloads run, controls enforced Normal ops Workload team Suspend Temporarily restrict activity CT SuspendManagedAccount Security / FinOps Delete Close account, retain evidence CT CloseAccount Governance board","title":"2. Lifecycle Stages"},{"location":"account-lifecycle/#3-account-creation-workflow","text":"Inputs Business justification Desired OU (e.g., Workloads/Prod ) Cost-allocation tag key-value Automation Service: Account Factory (native) or Account Factory for Terraform (AFT) Optional extra steps (Lambda or AFT hooks): bash # Pseudocode \u2013 runs right after account is provisioned create-iam-role --role-name \"ZirconTechOps\" \\ --policy-arn arn:aws:iam::aws:policy/AdministratorAccess enable-security-hub --standards \"CIS-1.5\" tag-resource --resource-id <accountId> --tags \"CostCenter=1234\" Outputs Account ID, email, OU path IAM role ZirconTechOps with least privilege for support Entry in Cost Explorer with tags active","title":"3. Account Creation Workflow"},{"location":"account-lifecycle/#4-account-suspension-workflow","text":"Step Action Tool 1 Trigger suspension ticket Jira / ServiceNow 2 Move account to Suspended OU (SCP denies writes) Organizations API 3 Disable IAM Identity Center assignments IAM Identity Center 4 Freeze budgets and alert bill-ops AWS Budgets 5 Log suspension event CloudWatch + centralized audit account","title":"4. Account Suspension Workflow"},{"location":"account-lifecycle/#5-account-deletion-closure-workflow","text":"Verify account is Suspended for at least 60 days. Export CloudTrail, Config, and S3 objects to the LogArchive account. Close account via CloseAccount (Organizations). Retain logs for 7 years in Glacier Deep Archive (compliance default). Update CMDB and tag account as Status=Closed .","title":"5. Account Deletion / Closure Workflow"},{"location":"account-lifecycle/#6-additional-iam-roles","text":"Role name Purpose Created at ZirconTechOps Break-glass admin support Account create SecurityAudit Read-only security reviews Account create FinOpsReadOnly Cost Explorer & Budgets API Account create Roles are deployed by AFT hook or Control Tower lifecycle Lambda.","title":"6. Additional IAM Roles"},{"location":"account-lifecycle/#7-drift-detection-review-cadence","text":"Monthly \u2013 Control Tower detects guardrail drift; report sent to project owner. Quarterly \u2013 Review suspended accounts for deletion approval. Annually \u2013 Confirm IAM roles, tags, and OU placement still correct.","title":"7. Drift Detection &amp; Review Cadence"},{"location":"account-lifecycle/#8-deliverables-to-customer","text":"Account lifecycle runbooks (PDF + Markdown) AFT or pipeline source code IAM role JSON templates Compliance evidence: drift reports, closure proof","title":"8. Deliverables to Customer"},{"location":"account-lifecycle/#9-change-management","text":"Any update to lifecycle steps, retention periods, or automation hooks is version-controlled in Git and requires a pull-request review by the Governance Board.","title":"9. Change Management"},{"location":"gitops-methodology/","text":"ZirconTech GitOps Methodology for AWS Infrastructure 1. Purpose Provide a repeatable GitOps workflow that lets customers define, test, and deploy AWS infrastructure\u2014networking included\u2014through code, continuous integration, and automated rollbacks. 2. Discovery \u2013 Gathering Infrastructure Requirements Kick-off workshop with architects, security, and networking leads Inputs collected Desired VPC layouts, CIDR ranges, hybrid connectivity Compliance controls (PCI, HIPAA, etc.) Identity model (IAM Identity Center, external IdP) Service quotas and regional constraints Output: Requirements matrix stored in the repo ( /docs/requirements.md ) 3. Tool Selection Criteria Scenario Primary Tool Notes Quick start, AWS-native AWS CloudFormation Guarded by CFN Guard tests Python-first teams AWS CDK cdk synth/diff in CI Heterogeneous clouds HashiCorp Terraform tflint , terraform plan TypeScript preference Pulumi Native language unit tests 4. Repository & Branch Strategy ``text infra/ \u251c\u2500 modules/ # Re-usable VPC, EKS, RDS modules \u251c\u2500 envs/ \u2502 \u251c\u2500 dev/ \u2502 \u251c\u2500 test/ \u2502 \u2514\u2500 prod/ \u2514\u2500 pipelines/ # GitHub Actions / CodePipeline definitions ```` * ** main ** branch = production. * ** feature/ ** and ** env/ `* branches auto-validate via CI. Pull request \u2192 code review \u2192 merge \u2192 pipeline deploys to target account. 5. CI Validation Steps Static analysis: cfn-lint , tflint , cfn-nag , or checkov Unit tests: CDK assert library or Terratest Policy checks: OPA / cfn-guard rules for tagging, encryption plan / cdk diff artifact uploaded to PR for human approval On success, pipeline promotes package to the artifact repository (S3 or CodeArtifact) 6. CD Pipeline & Rollback Stage Action Tooling Deploy-Dev Apply stack with automatic rollback on failure CloudFormation / Terraform Apply Deploy-Test Approval gate, then deploy AWS CodePipeline manual approval Deploy-Prod Blue/green or canary if service supports it Lambda, ECS, or ALB routing Drift Detect Nightly cfn-drift-detection / terraform plan -detailed-exitcode CloudWatch Events Rollback stack rollback or terraform apply previous state Automated in pipeline 7. Identity & Permissions as Code IAM roles, policies, and permission boundaries defined in the same repo ( infra/iam/ ). Use IAM Identity Center for federated access; assignments managed via IaC. Least-privilege validated by iam-access-analyzer during CI. 8. Monitoring & Alerts Pipeline events \u2192 SNS \u2192 Slack / Teams. Failed validations or drifts create Jira tickets automatically. CloudTrail + Config rules forward to central Audit account. 9. Deliverables Git repository with modules, pipelines, guardrail rules CI/CD dashboards link (GitHub Actions or CodePipeline) Runbooks for rollback, drift remediation, and role escalation","title":"GitOps Methodology"},{"location":"gitops-methodology/#zircontech-gitops-methodology-for-aws-infrastructure","text":"","title":"ZirconTech GitOps Methodology for AWS Infrastructure"},{"location":"gitops-methodology/#1-purpose","text":"Provide a repeatable GitOps workflow that lets customers define, test, and deploy AWS infrastructure\u2014networking included\u2014through code, continuous integration, and automated rollbacks.","title":"1. Purpose"},{"location":"gitops-methodology/#2-discovery-gathering-infrastructure-requirements","text":"Kick-off workshop with architects, security, and networking leads Inputs collected Desired VPC layouts, CIDR ranges, hybrid connectivity Compliance controls (PCI, HIPAA, etc.) Identity model (IAM Identity Center, external IdP) Service quotas and regional constraints Output: Requirements matrix stored in the repo ( /docs/requirements.md )","title":"2. Discovery \u2013 Gathering Infrastructure Requirements"},{"location":"gitops-methodology/#3-tool-selection-criteria","text":"Scenario Primary Tool Notes Quick start, AWS-native AWS CloudFormation Guarded by CFN Guard tests Python-first teams AWS CDK cdk synth/diff in CI Heterogeneous clouds HashiCorp Terraform tflint , terraform plan TypeScript preference Pulumi Native language unit tests","title":"3. Tool Selection Criteria"},{"location":"gitops-methodology/#4-repository-branch-strategy","text":"``text infra/ \u251c\u2500 modules/ # Re-usable VPC, EKS, RDS modules \u251c\u2500 envs/ \u2502 \u251c\u2500 dev/ \u2502 \u251c\u2500 test/ \u2502 \u2514\u2500 prod/ \u2514\u2500 pipelines/ # GitHub Actions / CodePipeline definitions ```` * ** main ** branch = production. * ** feature/ ** and ** env/ `* branches auto-validate via CI. Pull request \u2192 code review \u2192 merge \u2192 pipeline deploys to target account.","title":"4. Repository &amp; Branch Strategy"},{"location":"gitops-methodology/#5-ci-validation-steps","text":"Static analysis: cfn-lint , tflint , cfn-nag , or checkov Unit tests: CDK assert library or Terratest Policy checks: OPA / cfn-guard rules for tagging, encryption plan / cdk diff artifact uploaded to PR for human approval On success, pipeline promotes package to the artifact repository (S3 or CodeArtifact)","title":"5. CI Validation Steps"},{"location":"gitops-methodology/#6-cd-pipeline-rollback","text":"Stage Action Tooling Deploy-Dev Apply stack with automatic rollback on failure CloudFormation / Terraform Apply Deploy-Test Approval gate, then deploy AWS CodePipeline manual approval Deploy-Prod Blue/green or canary if service supports it Lambda, ECS, or ALB routing Drift Detect Nightly cfn-drift-detection / terraform plan -detailed-exitcode CloudWatch Events Rollback stack rollback or terraform apply previous state Automated in pipeline","title":"6. CD Pipeline &amp; Rollback"},{"location":"gitops-methodology/#7-identity-permissions-as-code","text":"IAM roles, policies, and permission boundaries defined in the same repo ( infra/iam/ ). Use IAM Identity Center for federated access; assignments managed via IaC. Least-privilege validated by iam-access-analyzer during CI.","title":"7. Identity &amp; Permissions as Code"},{"location":"gitops-methodology/#8-monitoring-alerts","text":"Pipeline events \u2192 SNS \u2192 Slack / Teams. Failed validations or drifts create Jira tickets automatically. CloudTrail + Config rules forward to central Audit account.","title":"8. Monitoring &amp; Alerts"},{"location":"gitops-methodology/#9-deliverables","text":"Git repository with modules, pipelines, guardrail rules CI/CD dashboards link (GitHub Actions or CodePipeline) Runbooks for rollback, drift remediation, and role escalation","title":"9. Deliverables"},{"location":"gitops-sow/","text":"Scope of Work GitOps Infrastructure Deployment on AWS 1. Objectives Implement a Git-centric workflow to define, test, and deploy all AWS infrastructure. Enable customer teams to manage identities and permissions through code. 2. In-Scope Activities Phase Tasks Deliverables Discovery Requirements workshop; networking design worksheet Approved requirements matrix Foundation Create repo, set up branching model, baseline modules Git repo bootstrapped CI Setup Linting, unit tests, policy checks, artifact storage CI pipeline operational CD Setup Multi-stage CodePipeline or GitHub Actions Dev, Test, Prod pipelines IAM as Code Define roles, permission boundaries, SSO assignments infra/iam/* modules Knowledge Transfer Pair-programming, runbooks, KT session Docs + session recording 3. Out-of-Scope Application code deployment On-prem identity provider changes 4. Acceptance Criteria All infrastructure changes flow only through pull requests. CI pipeline blocks merges failing lint, test, or policy checks. Rollback can be executed from the pipeline UI without manual CLI steps. 5. Pricing & Timeline Time-and-materials; target completion in six weeks. Milestone billing bi-weekly. 6. Change Control Scope modifications require a written change order approved by both parties.","title":"GitOps SOW"},{"location":"gitops-sow/#scope-of-work","text":"GitOps Infrastructure Deployment on AWS","title":"Scope of Work"},{"location":"gitops-sow/#1-objectives","text":"Implement a Git-centric workflow to define, test, and deploy all AWS infrastructure. Enable customer teams to manage identities and permissions through code.","title":"1. Objectives"},{"location":"gitops-sow/#2-in-scope-activities","text":"Phase Tasks Deliverables Discovery Requirements workshop; networking design worksheet Approved requirements matrix Foundation Create repo, set up branching model, baseline modules Git repo bootstrapped CI Setup Linting, unit tests, policy checks, artifact storage CI pipeline operational CD Setup Multi-stage CodePipeline or GitHub Actions Dev, Test, Prod pipelines IAM as Code Define roles, permission boundaries, SSO assignments infra/iam/* modules Knowledge Transfer Pair-programming, runbooks, KT session Docs + session recording","title":"2. In-Scope Activities"},{"location":"gitops-sow/#3-out-of-scope","text":"Application code deployment On-prem identity provider changes","title":"3. Out-of-Scope"},{"location":"gitops-sow/#4-acceptance-criteria","text":"All infrastructure changes flow only through pull requests. CI pipeline blocks merges failing lint, test, or policy checks. Rollback can be executed from the pipeline UI without manual CLI steps.","title":"4. Acceptance Criteria"},{"location":"gitops-sow/#5-pricing-timeline","text":"Time-and-materials; target completion in six weeks. Milestone billing bi-weekly.","title":"5. Pricing &amp; Timeline"},{"location":"gitops-sow/#6-change-control","text":"Scope modifications require a written change order approved by both parties.","title":"6. Change Control"},{"location":"multi-account-methodology/","text":"ZirconTech Methodology for an AWS Multi-Account Strategy 1. Purpose Describe how ZirconTech helps customers design, build, and support an AWS multi-account environment that aligns with security, operations, and cost-management goals. 2. Discovery and Inputs Current AWS footprint, workloads, compliance needs Org structure and separation of duties Identity provider and access patterns Budget and preferred tooling (native only, Terraform, etc.) 3. Design Principles Organize accounts around security boundaries and operational needs\u2014not the corporate org chart. Apply preventative and detective controls at the OU level with Service Control Policies (SCPs). Keep OU depth shallow; add additional OUs only when new guardrail or funding boundaries justify them. Separate production from non-production accounts to limit blast radius and simplify cost allocation. Automate account provisioning and guardrail enforcement (Control Tower Account Factory, AFT, or pipelines). 4. Reference OU Layout Root \u251c\u2500 Security (Log archive, Audit, Security tooling) \u251c\u2500 Infrastructure (Shared networking, CI/CD) \u251c\u2500 Sandbox (Experimental / learning) \u2514\u2500 Workloads \u251c\u2500 Prod \u2514\u2500 NonProd 5. Tooling and Automation Need Primary AWS service(s) Optional / Complementary Baseline guardrails AWS Control Tower (built-in mandatory guardrails) Landing Zone Accelerator, custom landing zone modules Account provisioning Control Tower Account Factory or Account Factory for Terraform (AFT) Custom CICD pipelines (e.g., GitHub Actions, CodePipeline) Identity federation IAM Identity Center integrated with external IdP AWS Directory Service Policy enforcement Service Control Policies (SCPs) , AWS Config, CloudTrail Security Hub, GuardDuty Cost allocation & tags AWS Budgets, Cost Explorer, AWS Organizations tagging Third-party FinOps tools 6. Implementation Phases Blueprint \u2013 confirm requirements, draft OU map, pick tooling Landing Zone Deploy \u2013 enable Control Tower, set mandatory guardrails Account Factory Setup \u2013 define account vending workflow (native or AFT) Controls and Integrations \u2013 SCPs, central logging, Security Hub, Cost Explorer views Handover \u2013 documentation, runbooks, knowledge-transfer workshop 7. Governance and Support Monthly drift-detection reports exported from AWS Control Tower and shared with the customer\u2019s ops or security team. Quarterly guardrail & cost reviews led by ZirconTech architects with customer stakeholders. Optional support retainer \u2013 incident response and routine maintenance hours can be added to the SOW on a per-project basis; service windows, SLAs, and escalation paths are defined during project kickoff. 8. Deliverables Final OU diagram and SCP library Automated account vending pipeline code Runbooks for break-glass access, new-account request, guardrail exception Knowledge-transfer session recording and slides","title":"Multi-Account Strategy"},{"location":"multi-account-methodology/#zircontech-methodology-for-an-aws-multi-account-strategy","text":"","title":"ZirconTech Methodology for an AWS Multi-Account Strategy"},{"location":"multi-account-methodology/#1-purpose","text":"Describe how ZirconTech helps customers design, build, and support an AWS multi-account environment that aligns with security, operations, and cost-management goals.","title":"1. Purpose"},{"location":"multi-account-methodology/#2-discovery-and-inputs","text":"Current AWS footprint, workloads, compliance needs Org structure and separation of duties Identity provider and access patterns Budget and preferred tooling (native only, Terraform, etc.)","title":"2. Discovery and Inputs"},{"location":"multi-account-methodology/#3-design-principles","text":"Organize accounts around security boundaries and operational needs\u2014not the corporate org chart. Apply preventative and detective controls at the OU level with Service Control Policies (SCPs). Keep OU depth shallow; add additional OUs only when new guardrail or funding boundaries justify them. Separate production from non-production accounts to limit blast radius and simplify cost allocation. Automate account provisioning and guardrail enforcement (Control Tower Account Factory, AFT, or pipelines).","title":"3. Design Principles"},{"location":"multi-account-methodology/#4-reference-ou-layout","text":"Root \u251c\u2500 Security (Log archive, Audit, Security tooling) \u251c\u2500 Infrastructure (Shared networking, CI/CD) \u251c\u2500 Sandbox (Experimental / learning) \u2514\u2500 Workloads \u251c\u2500 Prod \u2514\u2500 NonProd","title":"4. Reference OU Layout"},{"location":"multi-account-methodology/#5-tooling-and-automation","text":"Need Primary AWS service(s) Optional / Complementary Baseline guardrails AWS Control Tower (built-in mandatory guardrails) Landing Zone Accelerator, custom landing zone modules Account provisioning Control Tower Account Factory or Account Factory for Terraform (AFT) Custom CICD pipelines (e.g., GitHub Actions, CodePipeline) Identity federation IAM Identity Center integrated with external IdP AWS Directory Service Policy enforcement Service Control Policies (SCPs) , AWS Config, CloudTrail Security Hub, GuardDuty Cost allocation & tags AWS Budgets, Cost Explorer, AWS Organizations tagging Third-party FinOps tools","title":"5. Tooling and Automation"},{"location":"multi-account-methodology/#6-implementation-phases","text":"Blueprint \u2013 confirm requirements, draft OU map, pick tooling Landing Zone Deploy \u2013 enable Control Tower, set mandatory guardrails Account Factory Setup \u2013 define account vending workflow (native or AFT) Controls and Integrations \u2013 SCPs, central logging, Security Hub, Cost Explorer views Handover \u2013 documentation, runbooks, knowledge-transfer workshop","title":"6. Implementation Phases"},{"location":"multi-account-methodology/#7-governance-and-support","text":"Monthly drift-detection reports exported from AWS Control Tower and shared with the customer\u2019s ops or security team. Quarterly guardrail & cost reviews led by ZirconTech architects with customer stakeholders. Optional support retainer \u2013 incident response and routine maintenance hours can be added to the SOW on a per-project basis; service windows, SLAs, and escalation paths are defined during project kickoff.","title":"7. Governance and Support"},{"location":"multi-account-methodology/#8-deliverables","text":"Final OU diagram and SCP library Automated account vending pipeline code Runbooks for break-glass access, new-account request, guardrail exception Knowledge-transfer session recording and slides","title":"8. Deliverables"},{"location":"sow-multi-account-strategy/","text":"Scope of Work AWS Multi-Account Strategy Engagement Prepared for: Prepared by: ZirconTech 1. Objectives Design and deploy an AWS multi-account landing zone that meets security, operations, and cost-management requirements. Enable automated and auditable account provisioning. 2. In-Scope Activities Phase Activities Outputs 1. Discovery Stakeholder workshops, requirements matrix Current-state report 2. Design OU map, guardrail set, account factory design Architecture doc 3. Build Deploy Control Tower, SCPs, logging, AFT pipeline Configured landing zone 4. Validate Functional and security testing, handover Test report 5. Knowledge Transfer Runbooks, KT session Final documentation pack 3. Deliverables Multi-account architecture document Configured AWS Control Tower landing zone Terraform / AFT repository with account factory workflows SCP and AWS Config rules library Operational runbooks and knowledge-transfer recording 4. Timeline Milestone Week Kick-off 0 Landing zone deployed 2 Account factory operational 3 Validation complete 4 Actual dates confirmed during project planning. 5. Roles and Responsibilities Role ZirconTech Customer Project manager \u2713 Landing-zone engineer \u2713 Security lead \u2713 Point of contact Identity architect \u2713 (IdP integration) Change approval board \u2713 6. Assumptions Customer grants required IAM permissions. External IdP is available for IAM Identity Center integration. All testing uses non-production data. 7. Out-of-Scope Application refactoring On-premise network changes Ongoing managed services beyond 30 days post-go-live 8. Acceptance Criteria All guardrails in \u201cMandatory\u201d state in Control Tower At least one workload account created via factory and passing security checks Sign-off on final documentation pack 9. Pricing and Payment Time-and-materials, invoiced bi-weekly. Detailed rate card provided separately. 10. Change Management Material changes to scope, timeline, or cost will be handled through a mutually approved change order.","title":"Multi-Account SOW"},{"location":"sow-multi-account-strategy/#scope-of-work","text":"AWS Multi-Account Strategy Engagement Prepared for: Prepared by: ZirconTech","title":"Scope of Work"},{"location":"sow-multi-account-strategy/#1-objectives","text":"Design and deploy an AWS multi-account landing zone that meets security, operations, and cost-management requirements. Enable automated and auditable account provisioning.","title":"1. Objectives"},{"location":"sow-multi-account-strategy/#2-in-scope-activities","text":"Phase Activities Outputs 1. Discovery Stakeholder workshops, requirements matrix Current-state report 2. Design OU map, guardrail set, account factory design Architecture doc 3. Build Deploy Control Tower, SCPs, logging, AFT pipeline Configured landing zone 4. Validate Functional and security testing, handover Test report 5. Knowledge Transfer Runbooks, KT session Final documentation pack","title":"2. In-Scope Activities"},{"location":"sow-multi-account-strategy/#3-deliverables","text":"Multi-account architecture document Configured AWS Control Tower landing zone Terraform / AFT repository with account factory workflows SCP and AWS Config rules library Operational runbooks and knowledge-transfer recording","title":"3. Deliverables"},{"location":"sow-multi-account-strategy/#4-timeline","text":"Milestone Week Kick-off 0 Landing zone deployed 2 Account factory operational 3 Validation complete 4 Actual dates confirmed during project planning.","title":"4. Timeline"},{"location":"sow-multi-account-strategy/#5-roles-and-responsibilities","text":"Role ZirconTech Customer Project manager \u2713 Landing-zone engineer \u2713 Security lead \u2713 Point of contact Identity architect \u2713 (IdP integration) Change approval board \u2713","title":"5. Roles and Responsibilities"},{"location":"sow-multi-account-strategy/#6-assumptions","text":"Customer grants required IAM permissions. External IdP is available for IAM Identity Center integration. All testing uses non-production data.","title":"6. Assumptions"},{"location":"sow-multi-account-strategy/#7-out-of-scope","text":"Application refactoring On-premise network changes Ongoing managed services beyond 30 days post-go-live","title":"7. Out-of-Scope"},{"location":"sow-multi-account-strategy/#8-acceptance-criteria","text":"All guardrails in \u201cMandatory\u201d state in Control Tower At least one workload account created via factory and passing security checks Sign-off on final documentation pack","title":"8. Acceptance Criteria"},{"location":"sow-multi-account-strategy/#9-pricing-and-payment","text":"Time-and-materials, invoiced bi-weekly. Detailed rate card provided separately.","title":"9. Pricing and Payment"},{"location":"sow-multi-account-strategy/#10-change-management","text":"Material changes to scope, timeline, or cost will be handled through a mutually approved change order.","title":"10. Change Management"}]}